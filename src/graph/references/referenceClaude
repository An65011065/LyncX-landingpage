class BrowsingGraphVisualizer {
    constructor() {
        this.svg = null;
        this.simulation = null;
        this.nodes = [];
        this.links = [];
        this.clusters = new Map();
        this.selectedNode = null;
        this.zoomBehavior = null;
        this.data = null;

        this.width = window.innerWidth;
        this.height = window.innerHeight;

        // Network-wide metrics
        this.networkMetrics = {
            density: 0,
            domainDiversity: 0,
            navigationEfficiency: 0,
            clusteringCoefficient: 0,
            totalSessionTime: 0,
            // Advanced metrics for network science
            pageRank: new Map(),
            betweennessCentrality: new Map(),
            closenessCentrality: new Map(),
            eigenvectorCentrality: new Map(),
            degreeCentrality: new Map(),
            diameter: 0,
            radius: 0,
            assortativity: 0,
            smallWorldness: 0,
            burstiness: 0,
            temporalEfficiency: 0,
            sessionCoherence: 0,
            networkEntropy: 0,
            mutualInformation: 0,
            transferEntropy: 0,
        };

        this.init();
    }

    init() {
        this.setupSVG();
        this.setupControls();
        this.setupMetricsTooltips();
        this.setupSearchFunctionality();
        this.createCSVExportButton();
        this.setDefaultDateTime();

        // Add storage change listener for automatic updates
        this.setupStorageListener();

        // Handle window resize
        window.addEventListener("resize", () => this.handleResize());

        this.loadData();
    }

    setupSVG() {
        this.svg = d3
            .select("#graph")
            .attr("width", this.width)
            .attr("height", this.height);

        // Setup zoom
        this.zoomBehavior = d3
            .zoom()
            .scaleExtent([0.1, 4])
            .on("zoom", (event) => {
                this.svg
                    .select(".graph-container")
                    .attr("transform", event.transform);
            });

        this.svg.call(this.zoomBehavior);

        // Create main container
        this.svg.append("g").attr("class", "graph-container");

        // Add click handler to clear selection when clicking on empty space
        this.svg.on("click", (event) => {
            // Only clear if clicking on the SVG background, not on nodes
            if (
                event.target === this.svg.node() ||
                event.target.classList.contains("graph-container")
            ) {
                this.clearSelection();
            }
        });
    }

    setupControls() {
        const exportBtn = document.getElementById("exportBtn");
        if (exportBtn) {
            exportBtn.addEventListener("click", () => {
                this.exportGraph();
            });
        }

        // Initialize evolution controls as part of standard interface
        this.createEvolutionControls();
    }

    setupMetricsTooltips() {
        const tooltipDefinitions = {
            dwellTime: "How long you spend looking at each page.",
            pageEntropy:
                "Higher values = longer URLs with more path segments (like /category/subcategory/item/details). Lower values = shorter URLs (like /home).",
            returnVelocity:
                "Whether you've been to this exact page before. 0% = this is your first visit to this URL.",
            totalSessionTime:
                "Total time you've spent browsing across all your sessions.",
            socialTime:
                "Total time spent on social platforms like YouTube, X, Twitch, etc.",
            sessionFocus:
                "Measures how evenly your time is spread across different websites using the Gini coefficient. Shows if you focus deeply on few sites or browse many briefly.",
            domainDiversity: "How many different domains you visit.",
            navigationEfficiency:
                "Percentage of your clicks that stay within the same website versus jumping to different websites. Calculated as: same-domain links รท total links.",
            clusteringCoefficient:
                "Measures how much your pages form triangular connections - when pages you visit are also connected to each other, creating tight browsing clusters.",
        };

        Object.keys(tooltipDefinitions).forEach((metricId) => {
            const metricElement = document.getElementById(metricId);
            if (metricElement && metricElement.parentElement) {
                const labelElement =
                    metricElement.parentElement.querySelector(".metric-label");
                if (labelElement) {
                    this.addCustomTooltip(
                        labelElement,
                        tooltipDefinitions[metricId],
                    );
                }
            }
        });
    }

    addCustomTooltip(element, text) {
        element.addEventListener("mouseenter", (e) => {
            this.showCustomTooltip(e, text);
        });

        element.addEventListener("mouseleave", () => {
            this.hideCustomTooltip();
        });

        element.addEventListener("mousemove", (e) => {
            this.updateTooltipPosition(e);
        });
    }

    showCustomTooltip(event, text) {
        // Remove any existing custom tooltip
        this.hideCustomTooltip();

        const tooltip = document.createElement("div");
        tooltip.className = "custom-metric-tooltip";
        tooltip.textContent = text;
        tooltip.style.cssText = `
            position: fixed;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            max-width: 250px;
            line-height: 1.4;
            z-index: 10001;
            pointer-events: none;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        `;

        document.body.appendChild(tooltip);
        this.updateTooltipPosition(event);
    }

    updateTooltipPosition(event) {
        const tooltip = document.querySelector(".custom-metric-tooltip");
        if (tooltip) {
            const x = event.clientX + 10;
            const y = event.clientY - 10;

            // Make sure tooltip doesn't go off screen
            const rect = tooltip.getBoundingClientRect();
            const finalX = Math.min(x, window.innerWidth - rect.width - 10);
            const finalY = Math.max(10, y - rect.height);

            tooltip.style.left = finalX + "px";
            tooltip.style.top = finalY + "px";
        }
    }

    hideCustomTooltip() {
        const existingTooltip = document.querySelector(
            ".custom-metric-tooltip",
        );
        if (existingTooltip) {
            existingTooltip.remove();
        }
    }

    async loadData() {
        const loading = document.getElementById("loading");
        loading.classList.remove("hidden");

        try {
            let data = null;

            // First, try to load from Chrome storage (real data)
            try {
                if (typeof chrome !== "undefined" && chrome.storage) {
                    const result = await chrome.storage.local.get([
                        "graphData",
                    ]);
                    data = result.graphData;

                    if (data && data.sessions && data.sessions.length > 0) {
                        // Update UI to show real data indicator
                        this.updateDataSourceIndicator("real");
                    }
                }
            } catch (chromeError) {}

            if (!data || !data.sessions || data.sessions.length === 0) {
                throw new Error(
                    "No graph data found. Please open graph from extension popup.",
                );
            }

            if (data.error) {
                throw new Error(data.error);
            }

            if (!data.sessions || !Array.isArray(data.sessions)) {
                throw new Error(
                    "Invalid data format: missing or invalid sessions array",
                );
            }

            if (data.sessions.length === 0) {
                throw new Error("No browsing sessions found");
            }

            this.data = data;
            this.processData(data);
            this.calculateNetworkMetrics();
            this.updateURLCount();
            this.updateMetricsDisplay();
            this.createGraph();
        } catch (error) {
            this.showError(error.message || "Failed to load browsing data");
        } finally {
            loading.classList.add("hidden");
        }
    }

    processData(data) {
        this.nodes = [];
        this.links = [];
        this.clusters.clear();
        const nodeMap = new Map();
        let nodeId = 0;

        // Process sessions into nodes and links using chronological URL sequence
        data.sessions.forEach((session, sessionIndex) => {
            if (!session.urlSequence || session.urlSequence.length === 0) {
                return;
            }

            const clusterId = session.tabId;
            const clusterColor = this.getClusterColor(sessionIndex);

            this.clusters.set(clusterId, {
                id: clusterId,
                sessionId: session.sessionId,
                isActive: session.isActive,
                color: clusterColor,
                nodes: [],
                firstUrl: null,
                urlSequence: session.urlSequence.map((item) => item.url), // Extract just URLs for compatibility
                totalTime: 0, // Track total time spent in this cluster
            });

            let previousNodeKey = null;

            // Process URLs in their actual chronological order
            session.urlSequence.forEach((urlItem, sequenceIndex) => {
                // Add safety checks for urlItem properties
                if (!urlItem || typeof urlItem !== "object") {
                    return;
                }

                const { url, domain, timestamp } = urlItem;

                // Ensure we have at least url and domain
                if (!url) {
                    return;
                }

                const safeDomain = domain || "unknown-domain";
                const safeTimestamp = timestamp || Date.now();

                // Normalize URL to prevent duplicates from slight variations
                const normalizedUrl = this.normalizeUrl(url);
                const nodeKey = normalizedUrl; // Use just the normalized URL as key (global deduplication)

                if (!nodeMap.has(nodeKey)) {
                    // Create new node for first visit to this URL
                    const node = {
                        id: nodeId++,
                        url: normalizedUrl,
                        domain: safeDomain,
                        visitCount: 1,
                        tabId: clusterId,
                        sessionId: session.sessionId,
                        isActive: session.isActive,
                        cluster: clusterId,
                        clusterColor: clusterColor,
                        // Store metrics as arrays for multiple visits
                        dwellTimes: [
                            this.calculateDwellTime(urlItem, safeDomain),
                        ],
                        entropies: [
                            this.calculatePageEntropy(
                                normalizedUrl,
                                safeDomain,
                            ),
                        ],
                        returnVelocities: [
                            this.calculateReturnVelocity(
                                normalizedUrl,
                                safeDomain,
                            ),
                        ],
                        visitTimestamps: [safeTimestamp],
                        visitSequence: [sequenceIndex], // Track when in sequence this URL was visited
                        visitingSessions: [clusterId], // Track which sessions visited this URL
                        x: this.width / 2 + (Math.random() - 0.5) * 100,
                        y: this.height / 2 + (Math.random() - 0.5) * 100,
                    };

                    // Add computed properties for current metrics (latest visit)
                    node.dwellTime = node.dwellTimes[0];
                    node.entropy = node.entropies[0];
                    node.returnVelocity = node.returnVelocities[0];

                    this.nodes.push(node);
                    nodeMap.set(nodeKey, node);
                    this.clusters.get(clusterId).nodes.push(node);

                    // Add this node's dwell time to cluster total
                    this.clusters.get(clusterId).totalTime += node.dwellTime;

                    if (!this.clusters.get(clusterId).firstUrl) {
                        this.clusters.get(clusterId).firstUrl = normalizedUrl;
                    }
                } else {
                    // REVISIT: Add another visit to existing node
                    const existingNode = nodeMap.get(nodeKey);
                    const previousCount = existingNode.visitCount;
                    existingNode.visitCount++;
                    existingNode.dwellTimes.push(
                        this.calculateDwellTime(urlItem, safeDomain),
                    );
                    existingNode.entropies.push(
                        this.calculatePageEntropy(normalizedUrl, safeDomain),
                    );
                    existingNode.returnVelocities.push(
                        this.calculateReturnVelocity(normalizedUrl, safeDomain),
                    );
                    existingNode.visitTimestamps.push(safeTimestamp);
                    existingNode.visitSequence.push(sequenceIndex);

                    // Track that this session also visited this URL
                    if (!existingNode.visitingSessions.includes(clusterId)) {
                        existingNode.visitingSessions.push(clusterId);
                        this.clusters.get(clusterId).nodes.push(existingNode);

                        // Add this visit's dwell time to cluster total
                        this.clusters.get(clusterId).totalTime +=
                            existingNode.dwellTime;
                    } else {
                        // Same session revisiting - still add the dwell time for this visit
                        this.clusters.get(clusterId).totalTime +=
                            existingNode.dwellTime;
                    }

                    // Update current metrics to latest visit
                    existingNode.dwellTime =
                        existingNode.dwellTimes[
                            existingNode.dwellTimes.length - 1
                        ];
                    existingNode.entropy =
                        existingNode.entropies[
                            existingNode.entropies.length - 1
                        ];
                    existingNode.returnVelocity =
                        existingNode.returnVelocities[
                            existingNode.returnVelocities.length - 1
                        ];
                }

                // Create links based on actual chronological browsing sequence
                if (previousNodeKey && previousNodeKey !== nodeKey) {
                    const sourceNode = nodeMap.get(previousNodeKey);
                    const targetNode = nodeMap.get(nodeKey);

                    if (sourceNode && targetNode) {
                        // Check if this exact link already exists (same direction)
                        const existingLink = this.links.find(
                            (link) =>
                                link.source === sourceNode.id &&
                                link.target === targetNode.id,
                        );

                        if (existingLink) {
                            // Increase weight for repeated navigation
                            existingLink.weight =
                                (existingLink.weight || 1) + 1;
                            existingLink.traversalCount =
                                (existingLink.traversalCount || 1) + 1;
                        } else {
                            // Create new directed link
                            this.links.push({
                                source: sourceNode.id,
                                target: targetNode.id,
                                type: "navigation",
                                tabId: clusterId,
                                weight: 1,
                                traversalCount: 1,
                                sourceUrl: sourceNode.url,
                                targetUrl: targetNode.url,
                            });
                        }
                    } else {
                    }
                }

                // Update previous node for next iteration
                previousNodeKey = nodeKey;
            });
        });

        // Process inter-tab relationships to create cross-cluster connections
        this.processInterTabRelationships(data, nodeMap);

        // Log statistics about revisits and loops
        const revisitStats = this.nodes.filter((node) => node.visitCount > 1);
        const loopLinks = this.links.filter((link) => link.weight > 1);
        const interClusterLinks = this.links.filter(
            (link) => link.type === "inter-tab",
        );

        if (revisitStats.length > 0) {
        }
        if (loopLinks.length > 0) {
        }
        if (interClusterLinks.length > 0) {
        }

        // Log the actual URL sequence for debugging
        this.clusters.forEach((cluster, clusterId) => {
            if (cluster.urlSequence.length > 0) {
                const sequence = cluster.urlSequence
                    .slice(0, 10)
                    .map((url) => {
                        try {
                            return new URL(url).hostname;
                        } catch {
                            return url.split("/")[2] || url;
                        }
                    })
                    .join(" โ ");
            }
        });
    }

    processInterTabRelationships(data, nodeMap) {
        if (!data.tabRelationships || data.tabRelationships.length === 0) {
            return;
        }

        data.tabRelationships.forEach((relationship, index) => {
            const { openerUrl, targetUrl, parentTabId, childTabId } =
                relationship;

            if (!openerUrl || !targetUrl) {
                return;
            }

            // Normalize URLs to match our node keys
            const normalizedOpenerUrl = this.normalizeUrl(openerUrl);
            const normalizedTargetUrl = this.normalizeUrl(targetUrl);

            // Find the corresponding nodes
            const sourceNode = nodeMap.get(normalizedOpenerUrl);
            const targetNode = nodeMap.get(normalizedTargetUrl);

            if (!sourceNode || !targetNode) {
                return;
            }

            // Check if this inter-tab link already exists
            const existingInterTabLink = this.links.find(
                (link) =>
                    link.source === sourceNode.id &&
                    link.target === targetNode.id &&
                    link.type === "inter-tab",
            );

            if (existingInterTabLink) {
                // Increase weight for repeated inter-tab navigation
                existingInterTabLink.weight =
                    (existingInterTabLink.weight || 1) + 1;
                existingInterTabLink.traversalCount =
                    (existingInterTabLink.traversalCount || 1) + 1;
            } else {
                // Create new inter-tab link
                const interTabLink = {
                    source: sourceNode.id,
                    target: targetNode.id,
                    type: "inter-tab",
                    weight: 1,
                    traversalCount: 1,
                    sourceUrl: sourceNode.url,
                    targetUrl: targetNode.url,
                    parentTabId: parentTabId,
                    childTabId: childTabId,
                    timestamp: relationship.timestamp,
                };

                this.links.push(interTabLink);
            }
        });
    }

    calculateDwellTime(url, domain) {
        // Handle both object and string inputs
        const domainStr =
            typeof domain === "string" ? domain : domain?.domain || "unknown";

        if (!url || !domainStr) {
            return 0.1; // Minimum fallback for no data
        }

        // If this is called with urlItem object that has actual dwell time, use it
        if (typeof url === "object" && url.dwellTime && url.dwellTime > 0) {
            return url.dwellTime;
        }

        // If we have start/end times, calculate actual dwell time
        if (typeof url === "object" && url.startTime) {
            if (url.endTime) {
                return Math.max(0.1, (url.endTime - url.startTime) / 1000);
            } else {
                // For active pages, calculate time from start to now
                const now = Date.now();
                return Math.max(0.1, (now - url.startTime) / 1000);
            }
        }

        // If we only have a URL string and no timing data, return minimal time
        // This handles legacy data or edge cases
        return 0.1;
    }

    calculatePageEntropy(url, domain) {
        // Handle both object and string inputs
        const domainStr =
            typeof domain === "string" ? domain : domain?.domain || "unknown";

        if (!url || !domainStr) {
            return 1.0; // Default fallback
        }

        // Simulate entropy based on URL complexity and domain characteristics
        const urlComplexity = (url.length + url.split("/").length) / 20;
        const domainFactor = domainStr.length / 15;
        return Math.min(
            5,
            Math.max(0.1, urlComplexity + domainFactor + Math.random()),
        );
    }

    calculateReturnVelocity(url, domain) {
        // Handle both object and string inputs
        const domainStr =
            typeof domain === "string" ? domain : domain?.domain || "unknown";

        if (!url || !domainStr) {
            return 0; // Default fallback
        }

        const nodeVisits =
            this.domainData?.[domainStr]?.urls?.[url]?.visitTimestamps || [];
        return nodeVisits.length > 1 ? 100 : 0; // Simple: 100% if revisited, 0% if not
    }

    calculateNetworkMetrics() {
        if (this.nodes.length === 0) return;

        // Calculate basic network averages
        this.networkMetrics.avgDwellTime =
            this.nodes.reduce((sum, node) => sum + node.dwellTime, 0) /
            this.nodes.length;
        this.networkMetrics.avgPageEntropy =
            this.nodes.reduce((sum, node) => sum + node.entropy, 0) /
            this.nodes.length;
        this.networkMetrics.avgReturnVelocity =
            this.nodes.reduce((sum, node) => sum + node.returnVelocity, 0) /
            this.nodes.length;

        // Calculate new network science metrics
        this.calculateSocialTime();
        this.calculateSessionFocus();
        this.calculateDomainDiversity();
        this.calculateNavigationEfficiency();
        this.calculateClusteringCoefficient();

        // **CALCULATE ALL NEW ADVANCED METRICS**

        // Centrality metrics
        this.calculateCentralityMetrics();

        // Structural metrics
        this.calculateStructuralMetrics();

        // Temporal metrics
        this.calculateTemporalMetrics();

        // Information-theoretic metrics
        this.calculateInformationTheoreticMetrics();

        // Log some key insights for debugging

        this.calculateTotalSessionTime();
    }

    calculateTotalSessionTime() {
        let totalTime = 0;

        if (!this.nodes || !Array.isArray(this.nodes)) {
            this.networkMetrics.totalSessionTime = 0;
            return;
        }

        this.nodes.forEach((node) => {
            if (node && typeof node.dwellTime === "number") {
                totalTime += node.dwellTime;
            }
        });

        this.networkMetrics.totalSessionTime = totalTime;
    }

    calculateSocialTime() {
        // Define social media and entertainment platforms
        const socialDomains = [
            "youtube.com",
            "youtu.be",
            "facebook.com",
            "fb.com",
            "m.facebook.com",
            "instagram.com",
            "m.instagram.com",
            "x.com",
            "twitter.com",
            "mobile.twitter.com",
            "snapchat.com",
            "netflix.com",
            "tiktok.com",
            "m.tiktok.com",
            "linkedin.com",
            "m.linkedin.com",
            "reddit.com",
            "m.reddit.com",
            "old.reddit.com",
            "discord.com",
            "discordapp.com",
            "twitch.tv",
            "m.twitch.tv",
            "pinterest.com",
            "m.pinterest.com",
            "tumblr.com",
            "whatsapp.com",
            "web.whatsapp.com",
            "telegram.org",
            "web.telegram.org",
            "hulu.com",
            "disneyplus.com",
            "amazon.com/prime",
            "primevideo.com",
            "hbomax.com",
            "spotify.com",
            "open.spotify.com",
            "soundcloud.com",
        ];

        let socialTime = 0;

        this.nodes.forEach((node) => {
            if (!node.domain || !node.dwellTime) return;

            const domain = node.domain.toLowerCase();

            // Check if this domain matches any social platform
            const isSocial = socialDomains.some((socialDomain) => {
                // Handle exact matches and subdomain matches
                return (
                    domain === socialDomain ||
                    domain.endsWith("." + socialDomain) ||
                    (socialDomain.includes("/") &&
                        domain.includes(socialDomain.split("/")[0]))
                );
            });

            if (isSocial) {
                socialTime += node.dwellTime;
            }
        });

        this.networkMetrics.socialTime = socialTime;
    }

    calculateNetworkDensity() {
        const n = this.nodes.length;
        if (n < 2) {
            this.networkMetrics.networkDensity = 0;
            return;
        }
        // Density = actual edges / possible edges
        const maxPossibleEdges = (n * (n - 1)) / 2; // Undirected graph
        this.networkMetrics.networkDensity =
            (this.links.length / maxPossibleEdges) * 100;
    }

    calculateSessionFocus() {
        // Measure concentration vs exploration using domain time distribution
        const domainTimes = new Map();
        this.nodes.forEach((node) => {
            const domain = node.domain;
            domainTimes.set(
                domain,
                (domainTimes.get(domain) || 0) + node.dwellTime,
            );
        });

        const totalTime = Array.from(domainTimes.values()).reduce(
            (sum, time) => sum + time,
            0,
        );
        if (totalTime === 0) {
            this.networkMetrics.sessionFocus = 0;
            return;
        }

        // Calculate Gini coefficient for time distribution (0 = perfectly equal, 1 = all time on one domain)
        const times = Array.from(domainTimes.values()).sort((a, b) => a - b);
        const n = times.length;
        let giniSum = 0;

        times.forEach((time, i) => {
            giniSum += (2 * (i + 1) - n - 1) * time;
        });

        const gini = giniSum / (n * totalTime);
        this.networkMetrics.sessionFocus = gini * 100; // Convert to 0-100 scale
    }

    calculateDomainDiversity() {
        const uniqueDomains = new Set(this.nodes.map((node) => node.domain));
        this.networkMetrics.domainDiversity = uniqueDomains.size;
    }

    calculateNavigationEfficiency() {
        if (this.links.length === 0) {
            this.networkMetrics.navigationEfficiency = 0;
            return;
        }

        // Calculate how many links are within same domain vs cross-domain
        let sameDomainLinks = 0;
        this.links.forEach((link) => {
            const sourceNode = this.nodes.find(
                (n) => n.id === link.source.id || n.id === link.source,
            );
            const targetNode = this.nodes.find(
                (n) => n.id === link.target.id || n.id === link.target,
            );
            if (
                sourceNode &&
                targetNode &&
                sourceNode.domain === targetNode.domain
            ) {
                sameDomainLinks++;
            }
        });

        // Higher efficiency means more focused, domain-coherent browsing
        this.networkMetrics.navigationEfficiency =
            (sameDomainLinks / this.links.length) * 100;
    }

    calculateClusteringCoefficient() {
        if (this.nodes.length < 3) {
            this.networkMetrics.clusteringCoefficient = 0;
            return;
        }

        // Build adjacency list
        const adj = new Map();
        this.nodes.forEach((node) => adj.set(node.id, new Set()));

        this.links.forEach((link) => {
            const sourceId = link.source.id || link.source;
            const targetId = link.target.id || link.target;
            adj.get(sourceId)?.add(targetId);
            adj.get(targetId)?.add(sourceId);
        });

        let totalCoeff = 0;
        let validNodes = 0;

        this.nodes.forEach((node) => {
            const neighbors = adj.get(node.id);
            const degree = neighbors.size;

            if (degree < 2) return; // Need at least 2 neighbors for clustering

            let triangles = 0;
            const neighborsArray = Array.from(neighbors);

            // Count triangles (connections between neighbors)
            for (let i = 0; i < neighborsArray.length; i++) {
                for (let j = i + 1; j < neighborsArray.length; j++) {
                    if (adj.get(neighborsArray[i])?.has(neighborsArray[j])) {
                        triangles++;
                    }
                }
            }

            const possibleTriangles = (degree * (degree - 1)) / 2;
            totalCoeff += triangles / possibleTriangles;
            validNodes++;
        });

        this.networkMetrics.clusteringCoefficient =
            validNodes > 0 ? (totalCoeff / validNodes) * 100 : 0;
    }

    calculateAveragePathLength() {
        if (this.nodes.length < 2) {
            this.networkMetrics.averagePathLength = 0;
            return;
        }

        // Build adjacency list for BFS
        const adj = new Map();
        this.nodes.forEach((node) => adj.set(node.id, []));

        this.links.forEach((link) => {
            const sourceId = link.source.id || link.source;
            const targetId = link.target.id || link.target;
            adj.get(sourceId)?.push(targetId);
            adj.get(targetId)?.push(sourceId);
        });

        let totalDistance = 0;
        let pathCount = 0;

        // Calculate shortest paths between all pairs (sample for performance)
        const sampleSize = Math.min(10, this.nodes.length); // Sample to avoid O(nยณ) complexity
        const sampleNodes = this.nodes.slice(0, sampleSize);

        sampleNodes.forEach((startNode) => {
            const distances = new Map();
            const queue = [startNode.id];
            distances.set(startNode.id, 0);

            while (queue.length > 0) {
                const current = queue.shift();
                const currentDist = distances.get(current);

                adj.get(current)?.forEach((neighbor) => {
                    if (!distances.has(neighbor)) {
                        distances.set(neighbor, currentDist + 1);
                        queue.push(neighbor);
                    }
                });
            }

            // Add distances to total
            sampleNodes.forEach((endNode) => {
                if (startNode.id !== endNode.id && distances.has(endNode.id)) {
                    totalDistance += distances.get(endNode.id);
                    pathCount++;
                }
            });
        });

        this.networkMetrics.averagePathLength =
            pathCount > 0 ? totalDistance / pathCount : 0;
    }

    updateURLCount() {
        // Count URLs visited in the last 24 hours
        const now = Date.now();
        const oneDayAgo = now - 24 * 60 * 60 * 1000;

        let urlsLast24h = 0;
        if (this.data && this.data.sessions) {
            this.data.sessions.forEach((session) => {
                if (session.lastUpdate >= oneDayAgo && session.urlSequence) {
                    urlsLast24h += session.urlSequence.length;
                }
            });
        }

        document.getElementById("urlCount").textContent = `${urlsLast24h} urls`;
    }

    updateMetricsDisplay(hoveredNode = null) {
        const metrics = hoveredNode || this.networkMetrics;

        if (hoveredNode) {
            // Show individual node metrics
            document.getElementById("dwellTime").textContent =
                this.formatDwellTime(metrics.dwellTime);
            document.getElementById("pageEntropy").textContent =
                metrics.entropy.toFixed(2);
            document.getElementById(
                "returnVelocity",
            ).textContent = `${metrics.returnVelocity.toFixed(1)}%`;

            // Show total session time (always network-wide)
            document.getElementById("totalSessionTime").textContent =
                this.formatDwellTime(this.networkMetrics.totalSessionTime);

            // For individual nodes, show network averages for the network science metrics
            document.getElementById("socialTime").textContent =
                this.formatDwellTime(this.networkMetrics.socialTime);
            document.getElementById(
                "sessionFocus",
            ).textContent = `${this.networkMetrics.sessionFocus.toFixed(1)}%`;
            document.getElementById("domainDiversity").textContent =
                this.networkMetrics.domainDiversity.toString();
            document.getElementById(
                "navigationEfficiency",
            ).textContent = `${this.networkMetrics.navigationEfficiency.toFixed(
                1,
            )}%`;
            document.getElementById(
                "clusteringCoefficient",
            ).textContent = `${this.networkMetrics.clusteringCoefficient.toFixed(
                1,
            )}%`;
        } else {
            // Show network-wide metrics
            document.getElementById("dwellTime").textContent =
                this.formatDwellTime(metrics.avgDwellTime);
            document.getElementById("pageEntropy").textContent =
                metrics.avgPageEntropy.toFixed(2);
            document.getElementById(
                "returnVelocity",
            ).textContent = `${metrics.avgReturnVelocity.toFixed(1)}%`;

            // Show total session time
            document.getElementById("totalSessionTime").textContent =
                this.formatDwellTime(metrics.totalSessionTime);

            // Network science metrics
            document.getElementById("socialTime").textContent =
                this.formatDwellTime(metrics.socialTime);
            document.getElementById(
                "sessionFocus",
            ).textContent = `${metrics.sessionFocus.toFixed(1)}%`;
            document.getElementById("domainDiversity").textContent =
                metrics.domainDiversity.toString();
            document.getElementById(
                "navigationEfficiency",
            ).textContent = `${metrics.navigationEfficiency.toFixed(1)}%`;
            document.getElementById(
                "clusteringCoefficient",
            ).textContent = `${this.networkMetrics.clusteringCoefficient.toFixed(
                1,
            )}%`;
        }
    }

    getClusterColor(index) {
        const colors = [
            "#4285f4",
            "#ff6b6b",
            "#4ecdc4",
            "#45b7d1",
            "#96ceb4",
            "#feca57",
            "#ff9ff3",
            "#54a0ff",
            "#5f27cd",
            "#00d2d3",
        ];
        return colors[index % colors.length];
    }
